From 8a65dcf1283eac9963e68cd042ad503f87c49914 Mon Sep 17 00:00:00 2001
From: Pavel Karpov <pavel.karpov@flant.com>
Date: Fri, 25 Jul 2025 17:43:02 +0300
Subject: [PATCH] add mountPermissions to shapshot

Signed-off-by: Pavel Karpov <pavel.karpov@flant.com>
---
 pkg/nfs/controllerserver.go | 26 +++++++++++++++++++++++++-
 pkg/nfs/nodeserver.go       |  1 +
 2 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/pkg/nfs/controllerserver.go b/pkg/nfs/controllerserver.go
index 3b7b21a4..8cd2c16e 100644
--- a/pkg/nfs/controllerserver.go
+++ b/pkg/nfs/controllerserver.go
@@ -179,6 +179,7 @@ func (cs *ControllerServer) CreateVolume(ctx context.Context, req *csi.CreateVol
 
 	// Create subdirectory under base-dir
 	internalVolumePath := getInternalVolumePath(cs.Driver.workingMountDir, nfsVol)
+	klog.V(2).Infof("my-my-debug: internalVolumePath: %s", internalVolumePath)
 	if err = os.MkdirAll(internalVolumePath, 0777); err != nil {
 		return nil, status.Errorf(codes.Internal, "failed to make subdirectory: %v", err)
 	}
@@ -397,8 +398,13 @@ func (cs *ControllerServer) CreateSnapshot(ctx context.Context, req *csi.CreateS
 			klog.Warningf("failed to unmount snapshot nfs server: %v", err)
 		}
 	}()
+	mountPermissionsForSnapInternalVolPath, err := getMountPermissionsForSnapInternalVolPath(req.GetParameters())
+	if err != nil {
+		return nil, status.Errorf(codes.NotFound, "failed to get mountPermissionsForSnapInternalVolPath: %v", err)
+	}
 	snapInternalVolPath := getInternalVolumePath(cs.Driver.workingMountDir, snapVol)
-	if err = os.MkdirAll(snapInternalVolPath, 0777); err != nil {
+	klog.V(2).Infof("my-my-debug: snapInternalVolPath: %s", snapInternalVolPath)
+	if err = os.MkdirAll(snapInternalVolPath, os.FileMode(mountPermissionsForSnapInternalVolPath)); err != nil {
 		return nil, status.Errorf(codes.Internal, "failed to make subdirectory: %v", err)
 	}
 	if err := validateSnapshot(snapInternalVolPath, snapshot); err != nil {
@@ -680,6 +686,8 @@ func newNFSSnapshot(name string, params map[string]string, vol *nfsVolume) (*nfs
 			baseDir = v
 		case mountOptionsField:
 			// no op
+		case mountPermissionsField:
+			// no op
 		default:
 			return nil, status.Errorf(codes.InvalidArgument, "invalid parameter %q in snapshot storage class", k)
 		}
@@ -914,3 +922,19 @@ func volumeFromSnapshot(snap *nfsSnapshot) *nfsVolume {
 		uuid:    snap.uuid,
 	}
 }
+
+// getMountPermissionsForSnapInternalVolPath Convert VolumeSnapshot parameters to a snapInternalVolPath
+func getMountPermissionsForSnapInternalVolPath(params map[string]string) (uint32, error) {
+	mountPermissions := 0777 // default
+	for k, v := range params {
+		if strings.ToLower(k) == mountPermissionsField {
+			if v != "" {
+				var err error
+				if mountPermissions, err = strconv.ParseUint(v, 8, 32); err != nil {
+					return nil, status.Errorf(codes.InvalidArgument, "invalid mountPermissions %s in storage class", v)
+				}
+			}
+		}
+	}
+	return mountPermissions, nil
+}
diff --git a/pkg/nfs/nodeserver.go b/pkg/nfs/nodeserver.go
index ac28dd22..691593c6 100644
--- a/pkg/nfs/nodeserver.go
+++ b/pkg/nfs/nodeserver.go
@@ -118,6 +118,7 @@ func (ns *NodeServer) NodePublishVolume(_ context.Context, req *csi.NodePublishV
 	notMnt, err := ns.mounter.IsLikelyNotMountPoint(targetPath)
 	if err != nil {
 		if os.IsNotExist(err) {
+			klog.V(2).Infof("my-my-debug: targetPath: %s", targetPath)
 			if err := os.MkdirAll(targetPath, os.FileMode(mountPermissions)); err != nil {
 				return nil, status.Error(codes.Internal, err.Error())
 			}
-- 
2.43.0

