From 83eb7d75444ae74ca79e49569d3d13d54a93623e Mon Sep 17 00:00:00 2001
From: Pavel Karpov <pavel.karpov@flant.com>
Date: Sun, 27 Jul 2025 22:17:41 +0300
Subject: [PATCH] add mountPermissions to snapshot

Signed-off-by: Pavel Karpov <pavel.karpov@flant.com>
---
 pkg/nfs/controllerserver.go | 33 +++++++++++++++++++++++++++++++--
 pkg/nfs/nodeserver.go       |  9 +++++----
 pkg/nfs/utils.go            |  3 ++-
 3 files changed, 38 insertions(+), 7 deletions(-)

diff --git a/pkg/nfs/controllerserver.go b/pkg/nfs/controllerserver.go
index 3b7b21a4..348086e2 100644
--- a/pkg/nfs/controllerserver.go
+++ b/pkg/nfs/controllerserver.go
@@ -185,8 +185,8 @@ func (cs *ControllerServer) CreateVolume(ctx context.Context, req *csi.CreateVol
 
 	if mountPermissions > 0 {
 		// Reset directory permissions because of umask problems
-		if err = os.Chmod(internalVolumePath, os.FileMode(mountPermissions)); err != nil {
-			klog.Warningf("failed to chmod subdirectory: %v", err)
+		if err := chmodIfPermissionMismatch(internalVolumePath, os.FileMode(mountPermissions)); err != nil {
+			return nil, status.Error(codes.Internal, err.Error())
 		}
 	}
 
@@ -404,6 +404,17 @@ func (cs *ControllerServer) CreateSnapshot(ctx context.Context, req *csi.CreateS
 	if err := validateSnapshot(snapInternalVolPath, snapshot); err != nil {
 		return nil, err
 	}
+	mountPermissionsForSnapInternalVolPath, err := getMountPermissionsForSnapInternalVolPath(req.GetParameters())
+	if err != nil {
+		return nil, status.Errorf(codes.NotFound, "failed to get mountPermissionsForSnapInternalVolPath: %v", err)
+	} else {
+		if mountPermissionsForSnapInternalVolPath > 0 {
+			if err := chmodIfPermissionMismatch(snapInternalVolPath, os.FileMode(mountPermissionsForSnapInternalVolPath)); err != nil {
+				return nil, status.Error(codes.Internal, err.Error())
+			}
+		}
+
+	}
 
 	if err = cs.internalMount(ctx, srcVol, req.GetParameters(), nil); err != nil {
 		return nil, status.Errorf(codes.Internal, "failed to mount src nfs server: %v", err)
@@ -680,6 +691,8 @@ func newNFSSnapshot(name string, params map[string]string, vol *nfsVolume) (*nfs
 			baseDir = v
 		case mountOptionsField:
 			// no op
+		case mountPermissionsField:
+			// no op
 		default:
 			return nil, status.Errorf(codes.InvalidArgument, "invalid parameter %q in snapshot storage class", k)
 		}
@@ -914,3 +927,19 @@ func volumeFromSnapshot(snap *nfsSnapshot) *nfsVolume {
 		uuid:    snap.uuid,
 	}
 }
+
+// getMountPermissionsForSnapInternalVolPath Convert VolumeSnapshot parameters to a snapInternalVolPath
+func getMountPermissionsForSnapInternalVolPath(params map[string]string) (uint64, error) {
+	mountPermissions := uint64(0)
+	for k, v := range params {
+		if strings.ToLower(k) == mountPermissionsField {
+			if v != "" {
+				var err error
+				if mountPermissions, err = strconv.ParseUint(v, 8, 32); err != nil {
+					return 0, status.Errorf(codes.InvalidArgument, "invalid mountPermissions %s in storage class", v)
+				}
+			}
+		}
+	}
+	return mountPermissions, nil
+}
diff --git a/pkg/nfs/nodeserver.go b/pkg/nfs/nodeserver.go
index ac28dd22..ec2ccbcc 100644
--- a/pkg/nfs/nodeserver.go
+++ b/pkg/nfs/nodeserver.go
@@ -118,7 +118,7 @@ func (ns *NodeServer) NodePublishVolume(_ context.Context, req *csi.NodePublishV
 	notMnt, err := ns.mounter.IsLikelyNotMountPoint(targetPath)
 	if err != nil {
 		if os.IsNotExist(err) {
-			if err := os.MkdirAll(targetPath, os.FileMode(mountPermissions)); err != nil {
+			if err := os.MkdirAll(targetPath, 0777); err != nil {
 				return nil, status.Error(codes.Internal, err.Error())
 			}
 			notMnt = true
@@ -146,9 +146,10 @@ func (ns *NodeServer) NodePublishVolume(_ context.Context, req *csi.NodePublishV
 	}
 
 	if mountPermissions > 0 {
-		if err := chmodIfPermissionMismatch(targetPath, os.FileMode(mountPermissions)); err != nil {
-			return nil, status.Error(codes.Internal, err.Error())
-		}
+		klog.V(2).Infof("skip chmod on targetPath(%s), as there is no need to change the root directory of the nfs server", targetPath)
+		//if err := chmodIfPermissionMismatch(targetPath, os.FileMode(mountPermissions)); err != nil {
+		//	return nil, status.Error(codes.Internal, err.Error())
+		//}
 	} else {
 		klog.V(2).Infof("skip chmod on targetPath(%s) since mountPermissions is set as 0", targetPath)
 	}
diff --git a/pkg/nfs/utils.go b/pkg/nfs/utils.go
index 53737cb2..8f20549e 100644
--- a/pkg/nfs/utils.go
+++ b/pkg/nfs/utils.go
@@ -22,6 +22,7 @@ import (
 	"path/filepath"
 	"strings"
 	"sync"
+	"syscall"
 	"time"
 
 	"github.com/container-storage-interface/spec/lib/go/csi"
@@ -167,7 +168,7 @@ func chmodIfPermissionMismatch(targetPath string, mode os.FileMode) error {
 	perm := info.Mode() & os.ModePerm
 	if perm != mode {
 		klog.V(2).Infof("chmod targetPath(%s, mode:0%o) with permissions(0%o)", targetPath, info.Mode(), mode)
-		if err := os.Chmod(targetPath, mode); err != nil {
+		if err := syscall.Chmod(targetPath, uint32(mode)); err != nil {
 			return err
 		}
 	} else {
-- 
2.43.0

