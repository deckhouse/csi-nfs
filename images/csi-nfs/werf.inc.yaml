---
# do not remove this image: used in external audits (DKP CSE)
image: {{ $.ImageName }}-src-artifact
from: {{ $.Root.BASE_ALT_P11 }}
final: false
git:
  - url: {{ env "SOURCE_REPO" }}/steved/nfs-utils.git
    add: /
    to: /src/nfs-utils
    tag: {{ $.Versions.NFS_UTILS }}
    stageDependencies:
      install:
        - '**/*'
  - url: {{ env "SOURCE_REPO" }}/kubernetes-csi/csi-driver-nfs.git
    add: /
    to: /src/csi-driver-nfs
    tag: {{ $.Versions.CSI_DRIVER_NFS }}
    stageDependencies:
      install:
        - '**/*'
  - add: /
    to: /patches
    includePaths:
      - images/{{ $.ImageName }}/patches
    stageDependencies:
      install:
        - '**/*'
  - add: /
    to: /src/csi-nfs
    includePaths:
      - lib/go
    stageDependencies:
      install:
        - '**/*'
shell:
  beforeInstall:
    - apt-get update
    - apt-get install -y git
    - {{ $.Root.ALT_CLEANUP_CMD }}
  install:
    - cd /src/csi-driver-nfs
    - for patchfile in /patches/images/{{ $.ImageName }}/patches/*.patch; do echo "Apply ${patchfile} ... "; git apply ${patchfile} --verbose; done
    - cp -R /patches/images/{{ $.ImageName }}/patches/csi-driver-nfs/* ./
    - rm -rf /src/csi-driver-nfs/.git
    - rm -rf /src/nfs-utils/.git

---
{{- $csiBinaries := "/nfs-utils/sbin/* /nfs-utils/usr/bin/* /nfs-utils/usr/sbin/* /lib64/libnss_files.so.2 /lib64/libnss_dns.so.2 /bin/cp /bin/mount /bin/umount /usr/bin/shred" }}
image: {{ $.ImageName }}-binaries-artifact
from: {{ $.Root.BASE_ALT_P11 }}
final: false
import:
  - image: {{ $.ImageName }}-src-artifact
    add: /src
    to: /src
    before: install
git:
  - add: /tools/dev_images/additional_tools/alt/binary_replace.sh
    to: /binary_replace.sh
    stageDependencies:
      beforeSetup:
        - '**/*'
shell:
  beforeInstall:
    - apt-get update
    - apt-get install -y {{ $.Root.DEV_PACKAGES }}
    - apt-get install -y libmount-devel libnl-devel libreadline-devel libtirpc libtirpc-devel libuuid-devel libevent-devel libsqlite3x-devel libdevmapper-devel libblkid-devel libkeyutils-devel libxml2-devel mount
    - {{ $.Root.ALT_CLEANUP_CMD }}
      ### example werf build log
      # ...
      # nfs-utils-binaries-artifact/install  chmod go-rwx /nfs-utils/var/lib/nfs/sm /nfs-utils/var/lib/nfs/sm.bak /nfs-utils/var/lib/nfs/state
      # nfs-utils-binaries-artifact/install  chown deckhouse /nfs-utils/var/lib/nfs/sm /nfs-utils/var/lib/nfs/sm.bak /nfs-utils/var/lib/nfs/state
      # nfs-utils-binaries-artifact/install  chown: invalid user: ‘deckhouse’
      # ...
    - groupadd -g {{ $.Root.DECKHOUSE_UID_GID }} deckhouse
    - useradd -g deckhouse -u {{ $.Root.DECKHOUSE_UID_GID }} deckhouse
  install:
    - cd /src/nfs-utils
    - ./autogen.sh
    - ./configure --disable-gss --with-statduser=deckhouse --with-rpcgen=internal
    - make
    - make install DESTDIR=/nfs-utils
  beforeSetup:
    - cp -av /nfs-utils/usr/lib/* /usr/lib/
    - chmod +x /binary_replace.sh
    - /binary_replace.sh -i "{{ $csiBinaries }}" -o /relocate
  setup:
    - rm -rf /relocate/nfs-utils
    - cp -av /nfs-utils/sbin     /relocate
    - mkdir -p /relocate/usr
    - cp -av /nfs-utils/usr/bin  /relocate/usr
    - cp -av /nfs-utils/usr/sbin /relocate/usr
    - cp -av /nfs-utils/var      /relocate
    - mkdir -p /relocate/etc
    - cp -av /etc/netconfig /relocate/etc/netconfig

---
image: {{ $.ImageName }}-golang-artifact
from: {{ $.Root.BASE_GOLANG_1_23 }}
final: false
import:
  - image: {{ $.ImageName }}-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg

shell:
  setup:
    - cd /src/csi-driver-nfs
    - export CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO_VERSION={{ env "GOLANG_VERSION" }} GOPROXY={{ env "GOPROXY" }}
    - go mod vendor
    - go build -ldflags="-s -w" -tags {{ $.Root.MODULE_EDITION }} -o /nfsplugin ./cmd/nfsplugin
    - chmod +x /nfsplugin

---
image: {{ $.ImageName }}-distroless-artifact
from: {{ $.Root.BASE_ALT_P11 }}
final: false
shell:
  beforeInstall:
    - apt-get update
    - apt-get install -y {{ $.Root.ALT_BASE_PACKAGES }}
    - {{ $.Root.ALT_CLEANUP_CMD }}
  install:
    - mkdir -p /relocate/bin /relocate/sbin /relocate/etc /relocate/var/lib/ssl /relocate/usr/bin /relocate/usr/sbin /relocate/usr/share
    - cp -pr /tmp /relocate
    - cp -pr /etc/passwd /etc/group /etc/hostname /etc/hosts /etc/shadow /etc/protocols /etc/services /etc/nsswitch.conf /etc/netconfig /relocate/etc
    - cp -pr /usr/share/ca-certificates /relocate/usr/share
    - cp -pr /usr/share/zoneinfo /relocate/usr/share
    - cp -pr /var/lib/ssl/cert.pem /relocate/var/lib/ssl
    - cp -pr /var/lib/ssl/certs /relocate/var/lib/ssl
    - echo "deckhouse:x:{{ $.Root.DECKHOUSE_UID_GID }}:{{ $.Root.DECKHOUSE_UID_GID }}:deckhouse:/:/sbin/nologin" >> /relocate/etc/passwd
    - echo "deckhouse:x:{{ $.Root.DECKHOUSE_UID_GID }}:" >> /relocate/etc/group
    - echo "deckhouse:!::0:::::" >> /relocate/etc/shadow

---
image: {{ $.ImageName }}-distroless
from: {{ $.Root.BASE_SCRATCH }}
final: false
import:
  - image: {{ $.ImageName }}-distroless-artifact
    add: /relocate
    to: /
    before: setup

---
image: {{ $.ImageName }}
fromImage: {{ $.ImageName }}-distroless
import:
  - image: {{ $.ImageName }}-golang-artifact
    add: /nfsplugin
    to: /nfsplugin
    before: setup
  - image: {{ $.ImageName }}-binaries-artifact
    add: /relocate
    to: /
    before: setup
docker:
  ENTRYPOINT: ["/nfsplugin"]
  USER: deckhouse:deckhouse
