---
# do not remove this image: used in external audits (DKP CSE)
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
fromImage: builder/src
final: false
git:
  - add: {{ .ModuleDir }}
    to: /patches
    includePaths:
      - images/{{ $.ImageName }}/patches
    stageDependencies:
      install:
        - '**/*'
  - add: {{ .ModuleDir }}
    to: /src/csi-nfs
    includePaths:
      - lib/go
    stageDependencies:
      install:
        - '**/*'

secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}

shell:
  install:
    - git clone --depth 1 --branch {{ .Versions.NFS_UTILS }} $(cat /run/secrets/SOURCE_REPO)/steved/nfs-utils.git /src/nfs-utils
    - git clone --depth 1 --branch {{ .Versions.CSI_DRIVER_NFS }} $(cat /run/secrets/SOURCE_REPO)/kubernetes-csi/csi-driver-nfs.git /src/csi-driver-nfs
    - cd /src/csi-driver-nfs
    - for patchfile in /patches/images/{{ $.ImageName }}/patches/*.patch; do echo "Apply ${patchfile} ... "; git apply ${patchfile} --verbose; done
    - cp -R /patches/images/{{ $.ImageName }}/patches/csi-driver-nfs/* ./
    - rm -rf /src/csi-driver-nfs/.git vendor
    - rm -rf /src/nfs-utils/.git

---
{{- $csiBinaries := "/nfs-utils/sbin/* /nfs-utils/usr/bin/* /nfs-utils/usr/sbin/* /lib64/libnss_files.so.2 /lib64/libnss_dns.so.2 /bin/cp /bin/mount /bin/umount /usr/bin/shred" }}
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-binaries-artifact
fromImage: builder/alt
final: false
import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
    add: /src
    to: /src
    before: install
git:
  - add: {{ .ModuleDir }}/tools/dev_images/additional_tools/binary_replace.sh
    to: /binary_replace.sh
    stageDependencies:
      beforeSetup:
        - '**/*'
shell:
  beforeInstall:
    {{- include "alt packages proxy" . | nindent 4 }}
    - apt-get update
    - apt-get install -y make automake pkg-config gcc libtool git curl
    - apt-get install -y libmount-devel libnl-devel libreadline-devel libtirpc libtirpc-devel libuuid-devel libevent-devel libsqlite3x-devel libdevmapper-devel libblkid-devel libkeyutils-devel libxml2-devel mount
    - rm -rf /var/lib/apt/lists/* /var/cache/apt/* && mkdir -p /var/lib/apt/lists/partial /var/cache/apt/archives/partial
    - groupadd -g 64535 deckhouse
    - useradd -g deckhouse -u 64535 deckhouse
  install:
    - cd /src/nfs-utils
    - ./autogen.sh
    - ./configure --disable-gss --with-statduser=deckhouse --with-rpcgen=internal
    - make
    - make install DESTDIR=/nfs-utils
  beforeSetup:
    - cp -av /nfs-utils/usr/lib/* /usr/lib/
    - chmod +x /binary_replace.sh
    - /binary_replace.sh -i "{{ $csiBinaries }}" -o /relocate
  setup:
    - rm -rf /relocate/nfs-utils
    - cp -av /nfs-utils/sbin     /relocate
    - mkdir -p /relocate/usr
    - cp -av /nfs-utils/usr/bin  /relocate/usr
    - cp -av /nfs-utils/usr/sbin /relocate/usr
    - cp -av /nfs-utils/var      /relocate
    - mkdir -p /relocate/etc
    - cp -av /etc/netconfig /relocate/etc/netconfig

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-golang-artifact
fromImage: {{ eq $.Constants.SVACE_ENABLED "false" | ternary "builder/golang-alpine" "builder/alt-go-svace" }}
final: false

import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
    add: /src
    to: /src
    before: install

mount:
{{ include "mount points for golang builds" . }}

secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}

shell:
  setup:
    - cd /src/csi-driver-nfs/cmd/nfsplugin
    - GOPROXY=$(cat /run/secrets/GOPROXY) go mod download
    - |
      {{- include "image-build.build" (set $ "BuildCommand" (printf "GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-s -w\" -tags \"%s\" -o /%s" .MODULE_EDITION $.ImageName)) | nindent 6 }}
    - chmod +x /{{ $.ImageName }}

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}
fromImage: base/distroless
import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-golang-artifact
    add: /{{ $.ImageName }}
    to: /{{ $.ImageName }}
    before: setup
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-binaries-artifact
    add: /relocate
    to: /
    before: setup

imageSpec:
  config:
    entrypoint: ["/{{ $.ImageName }}"]
