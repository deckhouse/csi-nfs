name: Go checks for images

env:
  GO_BUILD_TAGS: "ce ee se seplus csepro"

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  go_linter:
    name: Go linter for images
    runs-on: [self-hosted, regular]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.5

      - name: Run Go lint
        run: |
          basedir=$(pwd)
          failed='false'
          for i in $(find images -type f -name go.mod);do
            dir=$(echo $i | sed 's/go.mod$//')
            cd $basedir/$dir
            # check all editions
            for edition in $GO_BUILD_TAGS ;do
              echo "Running linter in $dir (edition: $edition)"
              golangci-lint run --build-tags $edition
              if [ $? -ne 0 ]; then
                echo "Linter failed in $dir (edition: $edition)"
                failed='true'
              fi
            done
          done
          if [ $failed == 'true' ]; then
            exit 1
          fi

  go_tests:
    name: Go tests for images
    runs-on: [self-hosted, regular]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Run Go tests
        run: |
          basedir=$(pwd)
          failed='false'
          for i in $(find images -type f -name '*_test.go');do
            dir=$(echo $i | sed 's/[a-z_A-Z0-9-]*_test.go$//')
            cd $basedir/$dir
            # check all editions
            for edition in $GO_BUILD_TAGS ;do
              echo "Running tests in $dir (edition: $edition)"
              go test -v -tags $edition
              if [ $? -ne 0 ]; then
                echo "Tests failed in $dir (edition: $edition)"
                failed='true'
              fi
            done
          done
          if [ $failed == 'true' ]; then
            exit 1
          fi

  go_test_coverage:
    name: Go test coverage for images
    runs-on: [self-hosted, regular]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Run Go test coverage count
        run: |
          if [ ! -d "images" ]; then
              echo "No images/ directory found. Please run this script from the root of the repository."
              exit 1
          fi

          find images/ -type f -name "go.mod" | while read -r gomod; do
              dir=$(dirname "$gomod")
              
              echo "Test coverage in $dir"
              
              cd "$dir" || continue
              
              for tag in $GO_BUILD_TAGS; do
                  echo "  Build tag: $tag"
                  
                  go test ./... -cover -tags "$tag" 
              done
              
              cd - > /dev/null
              
              echo "----------------------------------------"
          done
